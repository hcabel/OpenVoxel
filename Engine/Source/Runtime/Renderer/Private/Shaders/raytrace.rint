#version 460
#extension GL_EXT_ray_tracing : require

struct Ray
{
	vec3 origin;
	vec3 direction;
};

struct Aabb
{
	vec3 minimum;
	vec3 maximum;
};

// Ray-AABB intersection
float hitAabb(const Aabb aabb, const Ray r)
{
	vec3  invDir = 1.0 / r.direction;
	vec3  tbot   = invDir * (aabb.minimum - r.origin);
	vec3  ttop   = invDir * (aabb.maximum - r.origin);
	vec3  tmin   = min(ttop, tbot);
	vec3  tmax   = max(ttop, tbot);
	float t0     = max(tmin.x, max(tmin.y, tmin.z));
	float t1     = min(tmax.x, min(tmax.y, tmax.z));
	return t1 > max(t0, 0.0) ? t0 : -1.0;
}

void main()
{
	Ray ray;
	ray.origin    = gl_WorldRayOriginEXT;
	ray.direction = gl_WorldRayDirectionEXT;

	// TODO: find a way to aproximate the aabb calculation
	// The thing is that we only need to know the distance of the ray to the aabb
	// My guess is that this distance is used in the ray traversal loop to know if it's the clossest hit or not.
	// Since we only have cube we might be able to use the lenght of the ray to the origin (maybe)
	Aabb aabb;
	vec3 aabbCenter = vec3(0.0, 0.0, 0.0);
	aabb.minimum = aabbCenter - vec3(0.5);
	aabb.maximum = aabbCenter + vec3(0.5);
	float tHit = hitAabb(aabb, ray);

	if(tHit > 0)
		reportIntersectionEXT(tHit, 0);
}

